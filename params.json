{
  "name": "DotNetRuleEngine",
  "tagline": "",
  "body": "> DotNetRuleEngine allows you to write your business logic as series of rules to keep your code clean and structured. Supports both **synchronous** and **asynchronous** execution and it is **S.O.L.I.D** compliant.\r\n\r\n\r\n### A few reasons use DotNetRuleEngine ###\r\n- S.O.L.I.D\r\n- Separation of Concern.\r\n- Encapsulates varying behavior. Such as business rules.\r\n- Easy to maintain.\r\n- Testable code.\r\n\r\nNuget package available at: [DotNetRuleEngine](https://www.nuget.org/packages/DotNetRuleEngine \"DotNetRuleEngine\")\r\n\r\n### Quick Start\r\n\r\n#### Install DotNetRuleEngine\r\n```csharp\r\nPM> Install-Package DotNetRuleEngine\r\n```\r\n\r\n#### Create Rule(s)\r\n\r\n*Create a rule to update FreeShipping attribute if the amount is greater than $50.00*\r\n\r\n```csharp\r\npublic class QualifiesForFreeShipping: Rule<Order>\r\n{   \r\n    public override IRuleResult Invoke()\r\n    {\r\n        // Order instance available through the model property.\r\n        if (Model.Total > 50.0m)\r\n        {\r\n            Model.FreeShipping = true;\r\n        }\r\n        \r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\n#### Invoke Rule(s)\r\n\r\n```csharp    \r\n\r\nOrder order = new Order { Id = 1, Total = 79.99 };\r\n\r\n// Pass order instance to RuleEngine.\r\nvar ruleResults = RuleEngine<Order>.GetInstance(order)\r\n    .ApplyRules(new QualifiesForFreeShipping())\r\n    .Execute()\r\n```\r\n\r\n###### Model used as an example\r\n\r\n```csharp\r\npublic class Order\r\n{\r\n    public int Id { get; set; }\r\n    public decimal Total { get; set; }\r\n    public bool FreeShipping { get; set; }\r\n}\r\n```\r\n\r\n[Documentation](https://github.com/ayayalar/DotNetRuleEngine/wiki \"Documentation\")",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}